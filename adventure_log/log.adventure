t (14/11/19)
+ plan (to run Savant's Test Executor on Defects4j)
+ TODO (run defects4j tests)
+ TODO (run the Savant's test executor)
+ TODO (analyze how to connect those two above)
+ TODO (identify what's the problem)

t (15/11/19)
o ref(4)
    + note (relevant files: class in junit_tests_execution, py class with keyword "genscript run test on cluster")
    + note (junit_tests_execution consists simple runners using JUnit Core that run test method individually)
    + note (module idea: SingleTestRunner, MultipleTestRunner)
    + note (running a test to: 1. get fail/success status 2. get which methods that are run)

o ref(3)
    + quest (Is a test referred by Savant represented by one test class or one method in a test class?)
        + note (assumption: one method in a test class, reason is the existence of SingleTestRunner that only run a method)
    + TODO (replicate SingleTestRunner and MultipleTestRunner)
    + TODO (determine the output format)
    o ref(5)
        + note (this is simultaneously addressed here too)

+ DONE (uploaded the diagram reference of Savant Architecture) attch(savant_diagram.pdf)
    + note (this still has some flaw in representing the process and could use a better diagram format)
        + TODO (make a better diagram)
            + quest (what does it mean to be 'better'?)
            + quest (is there a modelling language that can be recorded in git?)

t (16/11/19)
+ note (we had trouble attempting to run Daikon with Junit before)
    + quest (will running Daikon need the 'TestRunners'?)

+ DONE (make a new branch "Adventure")
    + note (the concern was the log commit will collute with the working commit, this is the solution)
    + note (the branch will never be merged and only serves as adventure logging purposes)
    + note (all logs and its related things will be deleted in master)

o ref(18)
    + note (problem: running Junit component on main directories on a Maven project, quicktart archetype)
        + note (problem solved, which maven archetype is not the problem)
        + note (reason: the classpath is incomplete, vscode+java extension issues)
        + note (solution: https://github.com/redhat-developer/vscode-java/issues/654)

o ref(18)
    + note (problem: running the testrunner and getting NoClassDefFoundError)
        + note (problem solved, next time please read the error message carefully)
        + note (reason: junit jar is missing on runtime)
        + note (solution: include the jar on the classpath (java -cp "here"))

+ DONE (make a SingleTestRunner)
    + note (we should care about config interchangability)

t (17/11/19)
o ref(4)
    + DONE (no needs to do more of this since it's very messy)

+ quest (does there exist a better option to do this log?) meta
    + note (one that could involve linking to commit number)

o ref(3)
    + quest (does Defects4j provide tools that could help this?)
    + quest (how do the paper with certified artifact use Defects4j?)

o ref(18)
    o ref(50)
    + TODO (make MultipleTestRunner)
    + TODO (make a procedure to list testclass and its methodnames from a project)
    + note (don't forget) ref(19)

o ref(50)
    + TODO (find a way to acquire which method is run by a test, coverage with cobertura and infer the methods from the coverage results)
        + note (cobertura can be used on running test just like running test as usual, said its documentation)

o ref(61)
    + note (Defects4j itself has its own "SingleTestRunner")
        + quest (Does it compatible with running a coverage test?)
    + note (Defects4j have a example to iterate its projects)
    + note (Defects4j make a automatic list of which tests failed, file:"failing_tests" (no extension))

t (18/11/19)
o ref(71)
    + note (problem: running coverage test only for a single test method)
        o ref(76)
            + note (Defects4j can also do coverage using Cobertura and also be able to run just one test method)
            + note (relevant) ref(31)
                + quest (can Daikon trace on test that Defects4j run?)
            + note (relevant: https://github.com/rjust/defects4j/issues/162)

o ref(71)
    + note (the steps Cobertura do, as we understand it: 1.it instruments the class 2.generate coverage of instrumented class)
    + note (defects4j does coverage but only instrument the class relevant to bugfix(we need more class instrumented))
    + quest (What are Test Suites? Evosuites? Randoop?)

o ref(71)
    + DONE (using Cobertura and a simple parsing py script)
        + note (problem: the instrumenting part still needs a manual list of which class to instrument for each test method)
        + note (problem: dealing with methods with same name but different signature)

o ref(19)
    + DONE (somewhat) attch(ref_design.txt)
        + TODO (make towards the clustering need)
        + quest (How Daikon actually process all these thing?)
        + note (related) ref(67)

t (19/11/19)
o ref(101)
    + note (steps to do next written on ref_design, "steps towards Clustering") attch(ref_design.txt)

+ quest (what would we do about directories separator, python version, and stuff that will be machine/config dependent?)

+ DONE (step 1 to 3 towards clustering) attch(ref_design.txt)
    + note (extra, now scripts can output to a file instead)
    + note (we make assumptions! assuming file and directory exist, assuming the folder structure is the package structure)
        + quest (is folder structure always the package structure?)
            + quest (is it the case if we just talk about Defects4j projects?)

+ DONE (step 4,5,6 towards Clustering) attch(ref_design.txt)
    + note (consider the "pythonic" way for scripts)
    + quest (how do we store inbetween files, so we could gitignore them better?)

t (20/11/19)
+ DONE (step 7,get all covered classes acript)
    + quest (Why doesn't Defects4j also provide a way to get this information?)
    + quest (Is there a better way to transfer data between formatting and process? better in term of performance?)
        + quest (how about utilizing database system?)
    + note (problem: we only make the procedure for one test only)
        + TODO (make the structure for multiple tests)
            + note (related, but it's different) ref(66)
            + note (might be the solution?) ref(92)

+ quest (should we make the Clustering procedure one python projects?)
    + quest (how do you structure a python project?)

o ref(92)
    + note (TestSuites are a way to run a bunch of test together)
    + note (Evosuites and Randoop are apparently a smart test generator that analyzes the program execution and assertion, how I put it may be inacurrate)
    o ref(129)
        + note (It can't be the solution because we need to run a single test method but test suites only provide for selection of test classes)
        o ref(127)
            + TODO (test out the python project structure for making a module)

+ note (the usage of $(..) in bash! it's pretty cool)

t (21/11/19)
+ note (problem: Defects4J only provide list of all test classes only, not until its methods)
    + note (solution: parse the sourcecode and match some regex)
        + TODO (above)
        + note (assumption: all test method is annotated by @Test and simply following by a class declaration with public void)

+ note (problem: number of python script parameter checking might be inconsistent)
    + note (solution: make a parameter for it)
        + TODO (above)

o ref(147)
    + DONE (towards step 9)
        o ref(148)
            + note (the assumption was wrong, there is a testclass that extends another testclass, that dont match the regex but have test on it)
            + note (it turns out defects4j produce a file listing all test name already)

o ref(119)
    + note (one option is make the file output use specific extension instead)

+ DONE (script to get all tests and passing tests, now ready for step 9 and beyond)
    o ref(158)
        + note (the all_tests list is produced after running `defects4j test`)
    o ref(150)
        + null (this issue is not important now)
            + note (refer to this quest/TODO instead) ref(131) ref(132) ref(140)

t (22/11/19)
+ quest ('what is this `#!/bin/sh`? it causes the script to be unable to read the config files)

+ DONE (make script do coverage for all failed test)
    + note (problem: it's slow, coverage seems done redundantly)
    o ref(160)
        + DONE (put them in a folder (named `temp`) and ignore the folder)
    + note (sh scripting intricacies, `while loop` file input is put at `done` at the end)
    + TODO (aggregate the report for each coverage result)
    + TODO (time each command)

+ DONE (make script to aggregate all results)
    + note (aggregation done using `set` functionality)
        + note (idea: https://stackoverflow.com/a/2151553)
    + note (this might be problematic: because of using set, two different signatured method is recorded as the same) ref(97)

t (23/11/19)
+ note (Defects4J should do coverage like cobetura, different command for instrumentation and coverage)
    o ref(175)
    + TODO (Make issue/suggestion for Defects4j) oot

+ DONE (step 9 is done)
    + note (problem: it takes too long, redundancy and still wrong info to capture)
        + note ("too long" is the coverage is done multiple times on a lot of tests) ref(174)
        + note ("wrong capture" part is reading the `coverage.xml` does not tell about the classes we need to inspect (the covered classes))

o ref(194)
    + null (this turns out to be wrong)
        + quest (what does the coverage results really tell?)

t(24/11/19)
+ TODO (attempt to follow Defects4J examples on coverage analysis)
    + quest (what does their example do?)

+ quest (does there exist a method to make TestSuites with selected test methods?)
    + note (answer found so far, not possible without modifying the tests itself)
        + note (idea: do modify the test class since we have the source code, python can do that)

o ref(201)
    + TODO (analyze Savant implementation as well)

+ quest (Should we just learn Perl and make everything in Perl??)

+ note (Defects4J is not yet fully compatible with Java 8)
    + TODO (set up Java 7 where Defects4J is fully compatible)

o ref(214)
    + note (problem: openJDK 7 is not easily available in Linux Mint, oh no)
        + note (solution: this, https://askubuntu.com/a/840945)
        + note (to make above work and to work with multiple openJDK version, we use `update-alternatives --config java` command)
            + note (problem: however, to make above works we need to comment out the `export JAVA_HOME` declaration on `.bashrc`, which subsequently makes some other things don't work anymore (vscode cant reach java, daikon.bashrc needs that too))
        + note (backup plan is, installing Defects4J on Ubuntu subsystem on Windows)

+ note (Defects4J error `./init.sh: line 115: jar: command not found` means java environment is not setup)

o ref(214)
    + DONE (this is done, also ref this) ref(218) ref(219)

t (25/11/19)
+ note (there exists example of scripts that built on to of Defects4J)

o ref(201)
    + DONE (analysisi of Defects4J's randoop_coverage.sh) attch(ref_design.txt)
        o ref(211)
            + note (WE PERL bois, we will be utilizing Defects4J Core)
            + TODO (do it in PERL)

o ref(234)
    + note (reason1 : Defects4J use Perl)
    + note (reason2 : Perl is strong on string comp/regex and we will be using that to read coverage results and output inbetween process)

+ quest (Where is that procedure of applying Defects4J on an arbitrary project as we understand it? did we have misconception?)

+ note (PERL var naming convention: all caps for cmd opt, all low for temporary var?)

+ note (problem: weird error regarding running single test)
    + note (reason: it is caused by the input that is read from a file. what's wrong is that you let the trailing /n get in the string and passed to the other scripts. which what cause a really weird error that cost you more than 6 hours. damn it.)

o ref(235)
    + DONE (a working Perl script that utilizes Defects4J Core, onwards to replication!)

t (26/11/19)
+ note (understanding chomp() and \r\n....)
    + note (the concern orinally found from here: https://stackoverflow.com/q/35940583)
    + note (however, the solution is then found here: https://stackoverflow.com/a/15735143)
    + note (final verdict: we care about \r\n when necessary, which is later)

+ note (about cobertura: the instrumented bytecode is the one that generates the .ser andfile)
    + note (and then, cobertura do report which then generates the readable .xml file. currently how we understand it)

o ref(235)
    + DONE (scripts that executes sets of single test and make coverage report for each. w/o reinstrumenting and recompiling everytime)
        o ref(192)
            + note (solution: that above is for ref's problem)

+ note (Defects4J heavily utilizes Ant, or specifically what might be called as Ant task)
    + note (we seems to not understand what Ant really is)
        + note (originally, we understood it that Ant is used for some kind of defining project structure and dependency manager. I guess we were either wrong or didn't realize it is so much more.)
    + note (Defects4J can export all test without running every test) 
        + note (a better alternative for script that we made) ref(163)
            + note (however, it seems it is still a WIP from Defects4J's behalf. as pointed out by comments on `framework/projects/defects4j.export.xml`)

t (27/11/19)
+ note (we originally call it `all_test_methods`, `all_test_classes` and stuff)
    + note (I want to call test_method simply just test)
    + TODO (make a dictionary or some sort denoting names for input and in-between files)
        + quest (What is the term DSL that we found in Cobertura doc? is it relevant?)

+ note (problem: suddenly `defects4j test` produce different result, previously 4 failed method to only one)
    + note (reason: you recently changed Java version from 8 to 7. Defects4J is only compatible w/ 7, using 8 will cause extra errors as pointed out here: https://github.com/rjust/defects4j/issues/194#issuecomment-460899398)

+ note (py aggregate scripts needs checking whether it's actually aggregate all of the methods)
    + note (relevant problem) ref(97)

+ note (the all test result has a lot of duplicates)
    + note (reason: `defects4j test` command append its all_test result, making the list stack)
    + note (solution: run `git clean -f -d` at the beginning everytime)

+ DONE (Perl recreation until step 7)

+ note (folder naming should have same num of digit)
    + note (to ass ease on traversing all of the folder)
    + note (Defects4J Lang project 1b has around 2000 tests)
    + note (to use for now, 6 digit, meaning maximum of 999999 test)

+ note (in-between files naming aggreement should be considered early)

+ note (parallelizing process is possible for some step)

t (28/11/19)
+ note (problem: well it's really long for one bug)
    + note (problem: and it takes a lot of space)

o ref(290)
    + note (however, some script iterates files better by simply for loop from 0 to n)
    + note (also, both the linux mint explorer and vscode shows it ordered already without caring the number of digit)

+ DONE (the whole step 1-11 for a bug)
    + TODO (retrospect)

t(30/11/19)
+ note (retro pt 1, TODO sweep)
    o ref(2,3,4,5)
        + DONE (the result is that we now can produce the input for method clustering  test selection)
    o ref(18)
        + DONE (SingleTestRunner is done,but it probably won't be used as is, cus we use perl and python now)
    o ref(19,25)
        + note (not done, good for document pointer)
    o ref(66)
        + DONE (same fate as SingleTestRunner)
    o ref(67,71,101,127,140,147,152,178)
        + DONE (simply)
    o ref(179)
        + note (this is an important bit, since we are now dealing with a heck lot of computation time)
    o ref(189)
        + note (idea outside TA)
    o ref(201,209)
        + DONE (is part of finding inspiration)
    o ref(214,235)
        + DONE (simply)
    0 ref(275)
        + DONE (dictionary, for documentation)

+ note (capitalize TODO and done, for ease of distinguishing) meta

+ note (retro pt 2, quest contemplation)
    + ref(16)
        + note (problem ref(300) might stem from our assumption. it might be wrong to use test method instead of test class)
    + ref(26,27)
        + note (this is kinda meta but ok)
    + ref(31,86,102)
        + TODO (determine how Daikon works and what we need to do to utilizes it)
    + ref(57)
        + note (hmm, meta)
    + ref(61)
        + note (yes, we now use Defects4J::Core from their Perl implementation)
    + ref(62)
        + note (the paper with artifact doesn't publicly share their implementation)
    + ref(76)
        + note (yes, but more correct to say Cobertura is most compatible with most java stuff)
    + ref(97)
        + note (we now understand about Test Suites, also Evosuties and Randoop. at least how they work on the surface)
    + ref(109)
        + note (this is compatibility issues, to worry later)
            + quest (what are the things about compatibility issues that we should worry?)

+ note (now that we think about it, this retro thing is kinda redundant) meta
    + todo (make visualizer for .adventure) meta

+ TODO (start the document)

t (1/12/19)
+ note (documents, presentation, are progressing)
    + note (refer to the stuff at `Drive TA`)

+ TODO (install CentOS dualbooted on the machine!)
    + note (CentOS reasoning: it has Java 7 readily available, it is close to Fedora(we've used them before))
+ TODO (do the Savant's Method Clustering and Test Selection)
+ TODO (determine Daikon input and how Daikon module process them)
    + note (relevant ref, or above is kinda a better rewording of ref) ref(341)

t (2/12/19)
+ note (about Savant clustering, if a resulting cluster is more than M, we randomly keep selecting M cluster from that cluster to create new group until the no cluster is no more than M size)
    + note (so if we happen to have only overlarge cluster with no more than 2M size, the random selection is only once per overlarge cluster. that's how we understand it)

+ done (method clustering yeah)
    + note (we save index of method instead of method name for cluster result. index is based on the order of `all_covered_method` file, that is generated in previous step)
        + quest (should we make the csv the same? use idx instead of method name that is too long?)

+ done (test selections)
    + note (problem: we weren't sure how to verify the result)
        + note (all output seems to have same number of test, regardless of T value)
            + null (retract that, using big value (T=1500) produce inequal amount of tests, which is possible)

t (4/12/19)
o ref(365)
    + done (Centos 8 is ready to dualboot!)
        + note (oh boy did it take a whole day and a half to set it all up, here's the story)
            + note (problem: the installer can't detect the free space in drive d that we shrink with `diskmgmt.msc`)
                + note (we tried a heck lot of things. using all other partition util tools to shrink, checking whether it's the usb bootleader fault, maybe we partition it wrongly...)
                + note (solution: disable UEFI, Centos can now be installed)
                    + note (why does it work? I don't know! (at the moment) they claim you can install it dualboot with a hassle but look at us. and then also...)
                    + note (problem: it can't dualboot! well it could but it's such a pain that the only way to do it is to reorder which to boot in BIOS setting)
                        + note (after hours of swimming in the forums and ask sites...)
                        + note (reason: it is because the disks type is MBR! installing UEFI-enabled OS need to be installed on disk with type of GPT!)
                        + note (solution: change it to GPT easy with windows provided `diskmgmt.msc`)
                            + note (however, we spent a lot of time deleting and moving a big chunks of data)

o ref(394)
    + note (this is actually mentioned in the error message when the installer told us that they didn't detect the free space in the disk) ref(388)
        + note (HECKin READ THE ERROR MESSAGE CAREFULLY) ref(46) ref(46) ref(46) ref(46) ref(46)

+ note (problem with long filename in Windows, those long filenames produced for tests)

+ note (migration notes)
    + note (from Linux Mint 19 (Virtual Machine) to CentOS 8 )
    + note (running savant_rework, steps, chronological) attch (ref_story.txt)

t (7/12/19)
+ note (the migration story is progressing)
    + quest (why is `sudo pip` not a good idea?)
    + note (oh yeah! it seems to run faster on Centos8)

o ref(402)
    + note (we can't seem to find where that file with long name is)

+ note (TODO sweep, line >355)
    o ref(359)
        + note (in progress)
    o ref(367)
        + done (yeah) ref(375) ref(379)
    o ref(368)
        + note (preparing for this)

+ TODO (try to understand SBFL Formulas and how we gather the information needed)

+ quest(do chmod +x need to be done every setup?)
+ note (using source for .sh files)

o ref(404)
    + done (migration is done)

t (8/12/19)
+ note (rebuilding SingleTestRunner, and using it simply with terminal `java` and `javac`)
    + note (javac also need to be configured to versin 7/1.7)
        + note (problem `alternatives` need to be config manually first)
            + note (solution: just access javac directly from the source)

+ note (setting `JAVA_HOME` will cause Defects4J `alternatives` to conflict)

t (9/12/19)
+ note (problem: currently fighting daikon.Chicory warning `classfile version (49) is out of date and may not be processed correctly` )
    + note (also fighting daikon error `Exception in thread "main" java.lang.AssertionError: not comparable [some listener classes of some kind]`)
    + note (solution: use earlier version of Daikon)
        + note (Savant use Daikon 5.2.8)
        + note (JDK 7 support is dropped since 5.7.0 according to: http://plse.cs.washington.edu/daikon/download/doc/CHANGES, the latest that support is 5.6.6)

o ref(424)
    + note (statistic for SBFL can be inferred from coverage results we have created)
        + note (we need to do method coverage for all failing test coverage results)
        + note (problem: found bs4 error again, I'm guessing it's because we use different python (we use python from conda))
            + note (solution: `pip install beautifulsoup4` again since it's now pip from conda, we presume)
                + note (it's true, `which pip` told us so)

o ref(449)
    + note (we found output redundancy in covered method by failed tests)
        + quest (should we put covered method for each failed tests in one folder `method_coverage_out` or put one file for each test coverage folder (`failing_test_coverage_out/#/cobertura/`)?)
            + note (first opt is easier for aggregate script)
            + note (second is easier for matrix gen script)
                + TODO (deal with failed test's covered method output redundancy)


t (10/12/19)
o ref(441)
    + note (solution: we use ppt-select-pattern option so we only see traces for the methods pay attention to. the error doesn't come up anymore.)
        + note (thanks to actual Savant sourcecode)

+ quest (what is this java flag: -Xmx700m?)
+ quest (are we collecting the right list of method?)

t (11/12/19)
+ note (Defects4J needs svn and patch)

+ note (Problem: Savant's data that we found seems to be different than the data that we generate)
    o ref(468)
    + quest (are we reading the coverage result correctly)
        + TODO (let's now focus on the SBFL part first, because it is easier to verify and compare)

t (12/12/19)
+ done (we do some clean up)
    + note (delete old test runner)
        + note (test runner now in daikon module)
        + note (rename a py script (`get_method_cluster` to `generate_method_clusters`)
            + note (consistency in verb used)
            + note (consistency in plural/singular object)

+ note (redundancy in `runconfig` and stuff)
+ quest (should we put temp in its own folder)

+ note (python and strategy pattern)
    + quest (how do you use python `lambda` ?)

t (17/12/19)
+ done (progress for SBFL module)
    + note (trying Strategy Pattern for python)
    + TODO (Learning 2 Rank using only SBFL first!)

t (20/12/19)
+ note (python error: "module() takes at most 2 arguments (3 given)")
    + note (learning about python importing modules basics)
        + note (a folder is a  `package`)
        + note (a file is a `module`)
        + note (almost everythin in python is an `object`)
        + note (Python 3.3 and above package does not need __init__.py)
            + note (however, we will still use __init__.py to import all classes automatically)

+ note (`dataframe[column][row]` and `dataframe[column]`)

+ note (Multric is an SBFL formula that also use learning-to-rank algorithm)

t (21/12/19)
+ note (learning more about modules importing dynamically)
    + note (`__init__.py` file exec script that is a combination of two below)
        + note (https://stackoverflow.com/a/1796247)
        + note (https://stackoverflow.com/a/1057534)
    + note (using combination of `staticmethod` and `abstractmethod`)
        + note (write `staticmethod` first!)

+ note (Multric seems like very big, it's one paper on its own)
    + TODO (explore and implement MULTRIC)

t (22/12/19)
+ note (changing variable names to match Multric)
    + note (before  : np    np_not  nf    nf_not)
    + note (after   : ep    np      ef    nf    )
        + note (a lesson on `\bregex\b`)
 
+ note (problem: some formula apparently have potential division by zero problem)

+ note (we found Gzoltar, a tool which one of its maintainer is one person that also maintain Defects4J and it has some SBFL function there)
    + note (now, we don't plan to use it since it doesn't have all)
    + note (we will be comparing the implementation instead and get some hints from there)
    + note (Gzoltar is a coverage tools for SBFL, and this reminds us of that question we had about coverage) ref(468) ref(475)
        + TODO (compare the coverage procedures/implementation to Gzoltar)

o ref(527)
    + note (assumption: if there happens a division by zero, return 0)
        + done (we temporarily just check zero division when there are some error first in that method)

+ TODO (add `get_name()` to AbstractSBFLStrategy` for documentation purposes)

t (24/12/19)
o ref(476) ref(424)
    + done (now move to understand the learning to rank)
        o ref(495)
    + note (we ignore multric for now)

+ note (instead of getting the project info from the WORKDIR, get the info by keeping which project and bug id that is currently being operated and use that info)
    + note (...or not since we easily get config info (project id, bug id) from the work dir)

+ TODO (refactor the cluster module, gather the relevant PY script to one folder)

+ note (dependency: one Defects4J's util needs `diffstat`)

+ note (introducing... `JavaParser`)
    + note (thanks to: https://stackoverflow.com/a/46851121)
    + note (there was some pyscripts implementation that is better if we use this (like getting all java class realiably instead of reading the folder structure))
    + note (problem: they only provide easy installation for maven/gradle project hmm)
        + note (solution: then use maven/gradle lol)
        + TODO (setup small maven project)
            + note (back to that Maven archetype, we need to learn them first)
        + quest (actually... which one (maven, gradle) do we better use so it isn't overkill since this is a small functionality?)
            + note (find the easier to setup/learn)

t (25/12/19)
o ref(561)
    + note (seems they are not much different, we use mvn instead because we use it before in this project)

+ note (problem: mvn needs to download some stuff and the download process needs to use Java 8)
    + note (error msg: [ERROR] No plugin found for prefix 'archetype' in the current project and in the plugin groups)
    + note (solution: set up file ~/.mavenrc for java_home exclusively for maven)

+ note (about maven, `groud_id` is you, `artifact_id` is project's root folder name, `package_id` is the packaging in class)

+ note (the code from ref(555) is using JavaParser 3.4.4 which is unavaliable in maven dependency manager)
    + note (problem: some methods and class of JavaParser have different signature in the newer version of JavaParser)
        + note (solution: read doc, find correct sig, fix it)
            + note (there was some annoying signature from ref(555) that can't be abstracted: `MethodDeclaration` and `ConstructorDeclaration`)
                + note (both are extended from a class named `CallableDeclaration<T> and the T is their own classes`)
                    + note (that made me unable to access the method from `CallableDeclaration` since they are different because of T)

+ done(add `java_scripts` not javascripts, `java` scripts folder containing java util scripts)
    + done (since it's awkward, rename the scripts `java_scripts` and `py_scripts` to `util`)

t (26/12/19)
+ note (dealing with resources folder for Junit testing for MethodDiff)
    + note (using this solution: https://stackoverflow.com/a/37707661)
        + note (originally we use this solution here: https://stackoverflow.com/a/28674517 , but it doesn't work)
        + quest (would this be still okay if it's run by different IDE or whatnot?)
        + note (there, some commented that using `ClassLoader` is problematic or something)
            + quest (What is `getResource()` from ClassLoader actually do?)
        + quest (is using maven could have relevance to this problem?)

+ note (regex to get right hand side of "prop=value")
    + note (learning capturing group again and $1)

t (27/12/19)
+ quest (what is `$_` often seen in Perl docs?)
    + note (seems not relevant for now)

+ note (problem: checking out all the source code, buggy and fixed, could takes up a lot of spaces)

+ TODO (make sure `java_utils` is already compiled at the strategy)

+ note (problem: NoClassDefFoundError again, now dealing with what classpath to specify to run a maven project)
    + note (the problem is the JavaParser that is specified in maven dependency list is not present in `target` folder)
        + note (making it unrunnable when trying to run the project using `java` from another location)
            + note (maven doesn't include the dependency in the built jar)
            + note (we don't know the classpath to be specified for JavaParser)

+ quest (`java_utils` is automatically using Java 7, should we make it use Java 8?)

o ref(604)
    + note (solution: using maven-shade-plugin so the dependency is included in the built jar)
        + note (thanks to: https://www.mkyong.com/maven/how-to-create-a-java-project-with-maven/)
        + note (a maven-shade-plugin gotcha appear, and solved: https://stackoverflow.com/a/42231035)
    
+ note (dealing with ENV and perl)
    + note (we explicitly specify JAVA and JAR to perl scripts via ENV var)

o ref(550) ref(559)
    + done (simple)

+ done (a Ground Truth Extractor - well, we didn't create a TODO for this, but ref(495))
    + TODO (build the l2r module)

o ref(623)
    + done (some fixes for compatibility (output format, java_utils changes))

t (28/12/19)
+ note (an exercise of python file handling and string manipulations)
    + note (`with open` + open every file: https://stackoverflow.com/a/18262324)
    + note (split vs partition: https://stackoverflow.com/a/21568360)

+ note (this just in, Savant extends Carrot, maybe Carrot have some implementation around)
    + note (Carrot: https://cs.brown.edu/~sk/Publications/Papers/Published/prkr-auto-fault-loc-inv/paper.pdf)
    + note (Daikon is used by Carrot to calculate spectra)
        + quest (can Daikon-produced spectra used to calculate SBFL instead? do we need actually cobertura?)

+ done (L2R prerocessing part, only for SBFL stat for now)
    + note (including reformatting for libswm, aggregation, and normalization)
    + quest (would it be okay for really big data?)

t (29/12/19)
+ note (we found out that we don't use LIBSVM, but rankSVM that use LIBLINEAR)
    + note (advice: download while you can cus the availability of these download links are questionable)
        + note (happen to savant a while back, and happen temporarily to ranksvm some days ago. they became unavaliable)
    + note (LIBLINEAR feature index start from 1 (oh no what a nightmare!))

o ref(624)
    + done (RankSVM ready, L2R Module Ready)
        + TODO (compile the necessary jar, lib, other stuff outside source code in one place)
        + TODO (understand and ready the CrossVal procedures)
        + TODO (the whole SAVANT architecture)
            + note (the pipeline to process ALL bugs)
            + note (identify which bug used in Savant (check savant_data))
            + note (reminder: ref(368) about DAIKON)
            + note (reminder: ref(519) about MULTRIC)
            + TODO (build the software/process diagram of all the module that is also for documentation purposes)
                + note (also ref(25))
        + note (ref(2) is also done or to be more precise not relevant anymore)

t (30/12/19)
+ note (code analysis: list the produced file chronologically to make sense of data flow, and prep for space requirement)
    + note (some identified problem that has not yet been addressed)
        o ref(97) ref(184)
        + note (problem: representing a class that is declared inside a class, those class names that has `$` in it)

+ note (make sure a single block of note can stand on its own) meta
    o ref(575) ref(577)

t (31/12/19)
+ TODO (logging the time and everything else, for documentation purposes)
    + note (point of interest: time taken, space/memory taken)

+ note (problem: `.classpath` error after oving `java_utils`)
    + note (reason: it's because there are errors in pom.xml of checked-out d4j project that hinder the compilation, they can't be ignored somehow)
        + note (solution: delete them since it's temporary anyway)
    + note (reason: another possible reason is because there are double maven projects that are the same)
        + note (solution: make sure there is are no double maven projects that are the same)

+ note (problem: `defects4j checkout` will raise error if output dir exist)
    + note (solution: make sure temp folders are deleted)

+ done (ground truth extractor integrated)
    + TODO (deal with error handling specified in TODO comments)

+ note (flag parameter is good)
    + note (we are using one for .sh files, `getopts` rules!!)
        + TODO (do for the rest of .sh files)
        + TODO (do so for .py as well)
            + note (yes this problem has been mentioned in ref(150))

+ quest (do we need to redo the `chmod +x` for scripts if these all are put somewhere else?)

+ note (we now use only the name `test` for a test method instead calling it `test_method`)

+ done (get_bug_info integrated)
    + TODO (make defects4j less verbose and catch relevant std output)
    + TODO (separate `defects4j test` on its own, it takes a long time)

+ note (problem: calling a script in a dir that calls another script in the same dir)

+ note (problem: error `can't instrument project!` for the run_test_coverage.pl script)
    + note (reason: run_test_coverage.pl script can't take relative path, the more precise error is that the relative path is doubled in resulting  processed abs path somehow. Most of this is defects4j's machination)

t (1/1/20)
o ref(704)
    + note (solution: well convert it to abs_path with perl `use Cwd qw(abs_path)`)

+ note (be careful of `TARGETPROJECT` and `TARGET_PROJECT`!)

+ note (problem: coverage takes too much time)
    + note (1 bug takes more than 1 hour, and we have 300 more bugs)
    + note (not the redundancy as mentioned ref(174) ref(192) but the process itself is slow)
        + note (solution: make it select fewer subset of tests to run)
            + note (assumption: to test: running one test class is faster than running the test inside one by one)

o ref(675)
    + note (solution: just click `proceed` because it also means ignore the problem, since we don't deal with d4j java projects compilation)

+ note (rethinking how true our way to get method coverage is)
    + note (mentioned before ref(468))

+ note (friendship ended with Cobertura, now I am best friend with OpenClover)
    + note (or not..? to use OpenClover, it seems that we need to...gasp! modify Defects4J!)
    + note (we also have to learn Ant! what is this? programming for ants?)
        + TODO (Defects4J x OpenClover)
