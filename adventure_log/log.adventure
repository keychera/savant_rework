t (14/11/19)
+ plan (to run Savant's Test Executor on Defects4j)
+ todo (run defects4j tests)
+ todo (run the Savant's test executor)
+ todo (analyze how to connect those two above)
+ todo (identify what's the problem)

t (15/11/19)
o ref(4)
    + note (relevant files: class in junit_tests_execution, py class with keyword "genscript run test on cluster")
    + note (junit_tests_execution consists simple runners using JUnit Core that run test method individually)
    + note (module idea: SingleTestRunner, MultipleTestRunner)
    + note (running a test to: 1. get fail/success status 2. get which methods that are run)

o ref(3)
    + quest (Is a test referred by Savant represented by one test class or one method in a test class?)
        + note (assumption: one method in a test class, reason is the existence of SingleTestRunner that only run a method)
    + todo (replicate SingleTestRunner and MultipleTestRunner)
    + todo (determine the output format)
    o ref(5)
        + note (this is simultaneously addressed here too)

+ done (uploaded the diagram reference of Savant Architecture) attch(savant_diagram.pdf)
    + note (this still has some flaw in representing the process and could use a better diagram format)
        + todo (make a better diagram)
            + quest (what does it mean to be 'better'?)
            + quest (is there a modelling language that can be recorded in git?)

t (16/11/19)
+ note (we had trouble attempting to run Daikon with Junit before)
    + quest (will running Daikon need the 'TestRunners'?)

+ done (make a new branch "Adventure")
    + note (the concern was the log commit will collute with the working commit, this is the solution)
    + note (the branch will never be merged and only serves as adventure logging purposes)
    + note (all logs and its related things will be deleted in master)

o ref(18)
    + note (problem: running Junit component on main directories on a Maven project, quicktart archetype)
        + note (problem solved, which maven archetype is not the problem)
        + note (reason: the classpath is incomplete, vscode+java extension issues)
        + note (solution: https://github.com/redhat-developer/vscode-java/issues/654)

o ref(18)
    + note (problem: running the testrunner and getting NoClassDefFoundError)
        + note (problem solved, next time please read the error message carefully)
        + note (reason: junit jar is missing on runtime)
        + note (solution: include the jar on the classpath (java -cp "here"))

+ done (make a SingleTestRunner)
    + note (we should care about config interchangability)

t (17/11/19)
o ref(4)
    + done (no needs to do more of this since it's very messy)

+ quest (does there exist a better option to do this log?) meta
    + note (one that could involve linking to commit number)

o ref(3)
    + quest (does Defects4j provide tools that could help this?)
    + quest (how do the paper with certified artifact use Defects4j?)

o ref(18)
    o ref(50)
    + todo (make MultipleTestRunner)
    + todo (make a procedure to list testclass and its methodnames from a project)
    + note (don't forget) ref(19)

o ref(50)
    + todo (find a way to acquire which method is run by a test, coverage with cobertura and infer the methods from the coverage results)
        + note (cobertura can be used on running test just like running test as usual, said its documentation)

o ref(61)
    + note (Defects4j itself has its own "SingleTestRunner")
        + quest (Does it compatible with running a coverage test?)
    + note (Defects4j have a example to iterate its projects)
    + note (Defects4j make a automatic list of which tests failed, file:"failing_tests" (no extension))

t (18/11/19)
o ref(71)
    + note (problem: running coverage test only for a single test method)
        o ref(76)
            + note (Defects4j can also do coverage using Cobertura and also be able to run just one test method)
            + note (relevant) ref(31)
                + quest (can Daikon trace on test that Defects4j run?)
            + note (relevant: https://github.com/rjust/defects4j/issues/162)

o ref(71)
    + note (the steps Cobertura do, as we understand it: 1.it instruments the class 2.generate coverage of instrumented class)
    + note (defects4j does coverage but only instrument the class relevant to bugfix(we need more class instrumented))
    + quest (What are Test Suites? Evosuites? Randoop?)

o ref(71)
    + done (using Cobertura and a simple parsing py script)
        + note (problem: the instrumenting part still needs a manual list of which class to instrument for each test method)
        + note (problem: dealing with methods with same name but different signature)

o ref(19)
    + done (somewhat) attch(designref.txt)
        + todo (make towards the clustering need)
        + quest (How Daikon actually process all these thing?)
        + note (related) ref(67)

t (19/11/19)
o ref(101)
    + note (steps to do next written on designref, "steps towards Clustering") attch(designref.txt)

+ quest (what would we do about directories separator, python version, and stuff that will be machine/config dependent?)

+ done (step 1 to 3 towards clustering) attch(designref.txt)
    + note (extra, now scripts can output to a file instead)
    + note (we make assumptions! assuming file and directory exist, assuming the folder structure is the package structure)
        + quest (is folder structure always the package structure?)
            + quest (is it the case if we just talk about Defects4j projects?)

+ done (step 4,5,6 towards Clustering) attch(designref.txt)
    + note (consider the "pythonic" way for scripts)
    + quest (how do we store inbetween files, so we could gitignore them better?)

t (20/11/19)
+ done (step 7,get all covered classes acript)
    + quest (Why doesn't Defects4j also provide a way to get this information?)
    + quest (Is there a better way to transfer data between formatting and process? better in term of performance?)
        + quest (how about utilizing database system?)
    + note (problem: we only make the procedure for one test only)
        + todo (make the structure for multiple tests)
            + note (related, but it's different) ref(66)
            + note (might be the solution?) ref(92)

+ quest (should we make the Clustering procedure one python projects?)
    + quest (how do you structure a python project?)

o ref(92)
    + note (TestSuites are a way to run a bunch of test together)
    + note (Evosuites and Randoop are apparently a smart test generator that analyzes the program execution and assertion, how I put it may be inacurrate)
    o ref(129)
        + note (It can't be the solution because we need to run a single test method but test suites only provide for selection of test classes)
        o ref(127)
            + todo (test out the python project structure for making a module)

+ note (the usage of $(..) in bash! it's pretty cool)

t (21/11/19)
+ note (problem: Defects4J only provide list of all test classes only, not until its methods)
    + note (solution: parse the sourcecode and match some regex)
        + todo (above)
        + note (assumption: all test method is annotated by @Test and simply following by a class declaration with public void)

+ note (problem: number of python script parameter checking might be inconsistent)
    + note (solution: make a parameter for it)
        + todo (above)

o ref(147)
    + done (towards step 9)
        o ref(148)
            + note (the assumption was wrong, there is a testclass that extends another testclass, that dont match the regex but have test on it)
            + note (it turns out defects4j produce a file listing all test name already)

o ref(119)
    + note (one option is make the file output use specific extension instead)

+ done (script to get all tests and passing tests, now ready for step 9 and beyond)
    o ref(158)
        + note (the all_tests list is produced after running `defects4j test`)
    o ref(150)
        + null (this issue is not important now)
            + note (refer to this quest/todo instead) ref(131) ref(132) ref(140)

t (22/11/19)
+ quest ('what is this `#!/bin/sh`? it causes the script to be unable to read the config files)

+ done (make script do coverage for all failed test)
    + note (problem: it's slow, coverage seems done redundantly)
    o ref(160)
        + done (put them in a folder (named `temp`) and ignore the folder)
    + note (sh scripting intricacies, `while loop` file input is put at `done` at the end)
    + todo (aggregate the report for each coverage result)
    + todo (time each command)

+ done (make script to aggregate all results)
    + note (aggregation done using `set` functionality)
        + note (idea: https://stackoverflow.com/a/2151553)
    + note (this might be problematic: because of using set, two different signatured method is recorded as the same) ref(97)

t (23/11/19)
+ note (Defects4J should do coverage like cobetura, different command for instrumentation and coverage)
    o ref(175)
    + todo (Make issue/suggestion for Defects4j) oot

+ done (step 9 is done)
    + note (problem: it takes too long, redundancy and still wrong info to capture)
        + note ("too long" is the coverage is done multiple times on a lot of tests) ref(174)
        + note ("wrong capture" part is reading the `coverage.xml` does not tell about the classes we need to inspect (the covered classes))

o ref(194)
    + null (this turns out to be wrong)
        + quest (what does the coverage results really tell?)

t(24/11/19)
+ todo (attempt to follow Defects4J examples on coverage analysis)
    + quest (what does their example do?)

+ quest (does there exist a method to make TestSuites with selected test methods?)
    + note (answer found so far, not possible without modifying the tests itself)
        + note (idea: do modify the test class since we have the source code, python can do that)

o ref(201)
    + todo (analyze Savant implementation as well)

+ quest (Should we just learn Perl and make everything in Perl??)

+ note (Defects4J is not yet fully compatible with Java 8)
    + todo (set up Java 7 where Defects4J is fully compatible)

o ref(214)
    + note (problem: openJDK 7 is not easily available in Linux Mint, oh no)
        + note (solution: this, https://askubuntu.com/a/840945)
        + note (to make above work and to work with multiple openJDK version, we use `update-alternatives --config java` command)
            + note (problem: however, to make above works we need to comment out the `export JAVA_HOME` declaration on `.bashrc`, which subsequently makes some other things don't work anymore (vscode cant reach java, daikon.bashrc needs that too))
        + note (backup plan is, installing Defects4J on Ubuntu subsystem on Windows)

+ note (Defects4J error `./init.sh: line 115: jar: command not found` means java environment is not setup)

o ref(214)
    + done (this is done, also ref this) ref(218) ref(219)

t (25/11/19)
+ note (there exists example of scripts that built on to of Defects4J)

o ref(201)
    + done (for randoop_coverage.sh) attch(designref.txt)
        o ref(211)
            + note (WE PERL bois, we will be utilizing Defects4J Core)
            + todo (do it in PERL)

o ref(234)
    + note (reason1 : Defects4J use Perl)
    + note (reason2 : Perl is strong on string comp/regex and we will be using that to read coverage results and output inbetween process)
